html_nodes(".experience") %>%
html_text()
IndeedSkills_clean <<- str_extract(str_sub(IndeedSkills, start=22), "[[:alpha:], ]{2,}")
}
getData("https://www.indeed.com/jobs?q=data+scientist&l=")
page1 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=10")
page2 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=20")
page3 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=30")
page4 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=40")
page5 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=50")
page6 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData <- function(url){
IndeedJobTitle<-url %>%
read_html() %>%
html_nodes("#resultsCol .jobtitle") %>%
html_text()
IndeedJobTitle_clean <<- str_extract(IndeedJobTitle, "[[:alpha:]., /-]{2,}")
IndeedJobLocation<-url %>%
read_html() %>%
html_nodes(".location") %>%
html_text()
IndeedJobLocation_clean <<- str_extract(IndeedJobLocation, "[[:alpha:], ]{2,}")
IndeedSkills<-url %>%
read_html() %>%
html_nodes(".experience") %>%
html_text()
IndeedSkills_clean <<- str_extract(str_sub(IndeedSkills, start=22), "[[:alpha:], ]{2,}")
}
getData("https://www.indeed.com/jobs?q=data+scientist&l=")
page1 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=10")
page2 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=20")
page3 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=30")
page4 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
getData("https://www.indeed.com/jobs?q=Data+Scientist&start=40")
page5 <- data.frame(IndeedJobTitle_clean,IndeedJobLocation_clean,IndeedSkills_clean)
?qt
dt(1.65, df=20)
pt(1.65, df=20)
1- pt(1.65, df=20)
1- pt(3, df=2)
1- pt(-1.79, df=19)
21.015-18.985
2.03/2
dt(.975, df=35)
qt(.975, df=35)
1.015/2.03
0.5*6
median(c(18.985,21.015))
knitr::opts_chunk$set(echo = TRUE)
median(c(65,77))
77-65
65+6
(77-65)/2
setwd("~/GitHub/MSDS/DATA606/Homework")
qt(.95, df=24)
qt(.95, df=24)
(6/1.71)*sqrt(24)
(6/qt(.95, df=24))*sqrt(24)
(6/qt(.95, df=24))*sqrt(25)
sqrt(10/(1.96*100))
(10/(1.96*100))^2
10/(1.96*100)
10/1.96
/100
5.102041/100
0.051^2
1.96*100
10/196
196/10
19.6^2
qnorm(.95,0,1)
qnorm(.95,0,1)
(qnorm(.95,0,1)/25)^2
(qnorm(.975,0,1)/10)^2
qnorm(.975,0,1)/10
qnorm(.975,0,1)
((qnorm(.975,0,1)*100)/10)^2
((qnorm(.95,0,1)*250)/25)^2
((qnorm(.995,0,1)*250)/25)^2
((qnorm(.995,0,1)*250)/25)^2
qt(.975, df=50)
qt(.95, df=50)
4.9/sqrt(51)
1.1/0.686
(1.1)/(4.9/sqrt(51))
(-0.545)/(8.887/sqrt(200))
pt(1.60, df=50)
dt(1.60, df=50)
pt(1.60, df=50)
1-pt(1.60, df=50)
pt(-0.867274, df=99)
1-pt(3.08, 1)
1-pt(3.08, 2)
1-pt(6.31, 1)
1-pt(12.71, 1)
2*(pt(-0.867274, df=99))
qt(.975, df=9)
(218.75-160.2)/sqrt((52.24/12)+(38.63/10))
(218.75-160.2)/sqrt((52.24^2/12)+(38.63^2/10))
1-pt(3.02, df+9)
1-pt(3.02, df+9)
1-pt(3.02, df=9)
(1-pt(3.02, df=9))*2
(19.85-16.12)/sqrt((4.51^2/26)+(3.58^2/26))
(1-pt(3.30302, df=25))*2
(12214*21.1)+(6616*25.5)+(17233*22.5)+(12289*22)+(2382*22)
(12214*21.1^2)+(6616*25.5^2)+(17233*22.5^2)+(12289*22^2)+(2382*22^2)
mean(18.7+19.6+19.3+18.9+17.5)
18.7+19.6+19.3+18.9+17.5
94/5
(18.7-18.8)^2+(19.6-18.8)^2+(19.3-18.8)^2+(18.9-18.8)^2+(17.5-18.8)^2
(1/50734)*25564819
(1/50733)*25564819
(1/1166)*267382
1167+4
0.0025/0.0013
0.0013/0.0025
2627/504
501.54/229.32
0.00252/0.00127
504*4
2627*4
501.54*4
2006.16+267382
?qf
pf(5.2, 4, 50734)
1-pf(5.2, 4, 50734)
1172-5
26782/1167
267382/1167
267382/1166
4*501.54
501.54/229.1191
1-pf(2.189, 4, 1167)
library(DATA606)
setwd("~/GitHub/MSDS/DATA606/Labs")
getLabs('Lab5')
getLabs("Lab5")
startLab("Lab5")
load("more/nc.RData")
View(nc)
summary(nc)
boxplot(nc$habit ~ nc$weight)
#boxplot(nc$habit ~ nc$weight)
summary(nc$habit)
boxplot(nc$habit)
by(nc$weight, nc$habit, mean)
boxplot(nc$weight ~ nc$habit)
by(nc$weight, nc$habit, length)
boxplot(nc$weight ~ nc$habit)
by(nc$weight, nc$habit, length)
hist(nc$weight ~ nc$habit)
by(nc$weight, nc$habit, length)
hist(nc$weight)
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks,  est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical" conflevel = 0.90)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical" 'conflevel = 0.90')
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", conflevel = 0.90)
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", conflevel = 0.90)
inference(y = nc$gained, x = nc$mature, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, x = nc$mature, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
by(nc$mage, nc$mature, min)
by(nc$mage, nc$mature, summary)
setwd("~/GitHub/MSDS/DATA607/Week 9")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(httr)
url='http://api.nytimes.com/svc/suggest/v1/timestags'
library(httr)
url='http://api.nytimes.com/svc/suggest/v1/timestags'
GET(url)
library(httr)
url='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
GET(url)
library(httr)
url='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
cel <- GET(url)
library(httr)
url='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
cel <- GET(url)
cel$status_code
headers(cel)
cel$content
content(cel, "parse")
?options
options(api-key="7178bcfcb8b24ba3bdf1d837327dfd79")
options(api-key = "7178bcfcb8b24ba3bdf1d837327dfd79")
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
?getForm
??getForm
library(RCurl)
?getForm
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)")
test2 <- GET(getForm(test, app-key= getOption("apikey")))
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)")
test2 <- GET(getForm(test, apikey= getOption("apikey")))
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=")
test2 <- GET(getForm(test, apikey= getOption("apikey")))
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
test2
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
xmlParse(test2)
??xmlParse
library(RCurl)
library(XML)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
xmlParse(test2)
library(RCurl)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
headers(test2)
library(RCurl)
library(jsonlite)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&api-key=7178bcfcb8b24ba3bdf1d837327dfd79")
test2 <- GET(test)
headers(test2)
fromJSON(test2)
fromJSON(test)
unlist(fromJSON(test))
?fromJSON
r <- fromJSON(test)
r
r[2,]
r[,2]
sapply(r, "[[", 2)
r[[2]]
data.frame(r[[2]])
library(RCurl)
library(jsonlite)
options(apikey = "7178bcfcb8b24ba3bdf1d837327dfd79")
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
test= sprintf(baseurl, "?query=Trump&filter=(Per)")
test2 <- GET(test)
headers(test2)
library(RCurl)
library(jsonlite)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
test= sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
test2 <- GET(test)
test2
rawdata <- fromJSON(test)
rawdata <- fromJSON(test)
rawdata
rawdata <- fromJSON(test)
rawdata
data.frame(rawdata[[2]])
#load required package
library(httr)
exampleurl='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
cel <- GET(url)
#check the status to be sure the call worked
cel$status_code
#status is 200 which means it worked
#view the content
content(cel, "parse")
#load required package
library(httr)
exampleurl='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
cel <- GET(exampleurl)
#check the status to be sure the call worked
cel$status_code
#status is 200 which means it worked
#view the content
content(cel, "parse")
#load required package
library(httr)
exampleurl='http://api.nytimes.com/svc/suggest/v1/timestags?query=cel&api-key=7178bcfcb8b24ba3bdf1d837327dfd79'
cel <- GET(exampleurl)
#check the status to be sure the call worked
cel$status_code
#status is 200 which means it worked
#view the content
content(cel, "parse")
?sprintf
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
rawdata <- fromJSON(trump)
rawdata
data.frame(rawdata[[2]])
trump2 = sprintf(baseurl, "?query=Trump&filter=(Per&max=20")
fromJSON(trump2)
trump2 = sprintf(baseurl, "?query=Trump&max=20")
fromJSON(trump2)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo)&max=20")
fromJSON(spain)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo),(Org)&max=20")
fromJSON(spain)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo),(Org)")
fromJSON(spain)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo)&max=10")
fromJSON(spain)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo)&max=10")
pres_des= sprintf(baseurl, "?query=Pres&filter=(Des)&max=10")
fromJSON(pres_des)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
fromJSON(pres_des)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=Spain&filter=(Geo)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
soc_des= sprintf(baseurl, "?query=soc&filter=(Des)&max=10")
fromJSON(soc_des)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spanish = sprintf(baseurl, "?query=spanish&filter=(Geo),(Des)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
soc_des= sprintf(baseurl, "?query=soc&filter=(Des)&max=10")
fromJSON(spanish)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spanish = sprintf(baseurl, "?query=french&filter=(Geo),(Des)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
soc_des= sprintf(baseurl, "?query=soc&filter=(Des)&max=10")
fromJSON(spanish)
#load required package
library(jsonlite)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=french&filter=(Geo)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
soc_des= sprintf(baseurl, "?query=soc&filter=(Des)&max=10")
hea_org= sprintf(baseurl, "?query=hea&filter=(Org)&max=10")
fromJSON(hea_org)
data.fram(fromJSON(trump_all)[[2]])
data.frame(fromJSON(trump_all)[[2]])
#load required package
library(jsonlite)
#fromJSON turns the JSON code into an R list. The search criteria is in the first element of the list and the results are in the second element.
fromJSON(trump_all)
#create a dataframe from the second element in the list
trump <- data.frame(fromJSON(trump_all)[[2]])
head(trump)
#load required package
library(jsonlite)
#fromJSON turns the JSON code into an R list. The search criteria is in the first element of the list and the results are in the second element.
fromJSON(trump_all)
#create a dataframe from the second element in the list
trump <- data.frame(fromJSON(trump_all)[[2]])
names(trump) <- Tags_incl_"Trump"
#load required package
library(jsonlite)
#fromJSON turns the JSON code into an R list. The search criteria is in the first element of the list and the results are in the second element.
fromJSON(trump_all)
#create a dataframe from the second element in the list
trump <- data.frame(fromJSON(trump_all)[[2]])
names(trump) <- "Tags_incl_'Trump'"
head(trump)
#here is the base url for the Times Tags API with my API key and a placeholder for the query text ('%s)
baseurl = "http://api.nytimes.com/svc/suggest/v1/timestags%s&api-key=7178bcfcb8b24ba3bdf1d837327dfd79"
#Using sprintf, I am able to paste the query into the baseurl
#This query searches for personal names including "Trump" and limits the results to 20.
trump_per = sprintf(baseurl, "?query=Trump&filter=(Per)&max=20")
#This query searches all dictionaries for "Trump" and limits the results to 20.
trump_all = sprintf(baseurl, "?query=Trump&max=20")
#Additional examples
spain = sprintf(baseurl, "?query=french&filter=(Geo)&max=10")
pres_des= sprintf(baseurl, "?query=pres&filter=(Des)&max=10")
soc_des= sprintf(baseurl, "?query=soc&filter=(Des)&max=10")
hea_org= sprintf(baseurl, "?query=hea&filter=(Org)")
fromJSON(hea_org)
fromJSON(sprintf(baseurl, "?query=llc&filter=(Org)"))
fromJSON(sprintf(baseurl, "?query=llc&filter=(Org)&max=50"))
top200 <- data.frame(fromJSON(sprintf(baseurl, "?query=llc&filter=(Org)&max=200"))[[2]])
View(top200)
top200 <- data.frame(fromJSON(sprintf(baseurl, "?query=llc&filter=(Org)&max=200"))[[2]])
names(top200) <- "Top200 LLC's"
View(top200)
