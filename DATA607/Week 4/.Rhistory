View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- rating2
View(chess_data)
View(chess_data)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
View(new_data)
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
View(even_rows)
combined_data <- merge(even_rows, odd_rows, by="V11")
View(combined_data)
chess_data <- combined_data[c("V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- rating2
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
View(chess_data)
View(chess_data)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
View(new_data)
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
View(even_rows)
combined_data <- merge(even_rows, odd_rows, by="V11")
View(combined_data)
chess_data <- combined_data[c("V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- rating2
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- rating2
Round1_Opp <- str_extract(V4.y, "[[:digit:]]{1,2}")
Round1_Opp <- str_extract(chess_data$V4.y, "[[:digit:]]{1,2}")
View(chess_data)
View(chess_data)
chess_data$Round1_Opp <- str_extract(chess_data$V4.y, "[[:digit:]]{1,2}")
test_data <- chess_data["V11", "Player_Pre_Rating", "Round1_Opp"]
test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
test <- merge(chess_data, test_data, by.x="v11", by.y = "Round1_Opp")
View(test_data)
View(test_data)
str(test_data)
chess_data$Round1_Opp <- as.numberic(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
View(chess_data)
View(chess_data)
test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
test <- merge(chess_data, test_data, by.x="v11", by.y = "Round1_Opp")
?merge
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.numeric(rating2)
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.numeric(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.numeric(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.numeric(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.numeric(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.numeric(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.numeric(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
install.packages("sqldf")
library(sqldf)
sqldf("select * from test_data a inner join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
library(sqldf)
sqldf("select b.Player_Pre_Rating from test_data a inner join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
library(sqldf)
sqldf("select b.Player_Pre_Rating from chess_data a inner join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a inner join chess_data b on a.V11 = b.Round1_Opp ")
View(chess_data)
View(chess_data)
library(sqldf)
##chess_data$Round1_Opp_Rating <-
sqldf("select b.Player_Pre_Rating from chess_data a inner join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
library(sqldf)
##chess_data$Round1_Opp_Rating <-
sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp ")
##test_data <- chess_data[c("V11", "Player_Pre_Rating", "Round1_Opp")]
?if
()
ifelse( chess_data$Round1_Opp_Rating != NA, 1, 0)
ifelse( chess_data$Round1_Opp_Rating > 0, 1, 0)
ifelse( is.na(chess_data$Round1_Opp_Rating), 0, 1)
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp")
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.numeric(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.numeric(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.numeric(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.numeric(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.numeric(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.numeric(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp")
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.numeric(rating2)
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.numeric(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.numeric(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.numeric(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.numeric(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.numeric(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.numeric(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round1_Opp")
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round2_Opp")
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round2_Opp")
sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round2_Opp")
sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data b on a.V11 = b.Round2_Opp")
chess_data2 <- chess_data[c("V11", "Round1_Opp", "Round2_Opp", "Round3_Opp", "Round4_Opp", "Round5_Opp", "Round6_Opp", "Round7_Opp")]
View(chess_data2)
View(chess_data2)
View(chess_data2)
View(chess_data2)
sqldf("select b.Player_Pre_Rating from chess_data2 a left join chess_data b on a.Round1_Opp = b.Round1_Opp")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.numeric(rating2)
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.numeric(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.numeric(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.numeric(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.numeric(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.numeric(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.numeric(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
View(chess_data)
View(chess_data)
chess_data2 <- chess_data[c("V11", "Round1_Opp", "Round2_Opp", "Round3_Opp", "Round4_Opp", "Round5_Opp", "Round6_Opp", "Round7_Opp")]
sqldf("select b.Player_Pre_Rating from chess_data2 a left join chess_data b on a.Round1_Opp = b.Round1_Opp")
library(sqldf)
sqldf("select b.Player_Pre_Rating from chess_data2 a left join chess_data b on a.Round1_Opp = b.Round1_Opp")
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data2 a left join chess_data b on a.Round1_Opp = b.Round1_Opp")
View(chess_data)
View(chess_data)
sqldf("select b.Player_Pre_Rating from chess_data2 a left join chess_data b on a.Round2_Opp = b.Round2_Opp")
View(chess_data2)
View(chess_data2)
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
View(chess_data2)
View(chess_data2)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.numeric(rating2)
chess_data$Round1_Opp <- as.numeric(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.numeric(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.numeric(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.numeric(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.numeric(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.numeric(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.numeric(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
View(chess_data)
View(chess_data)
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11;")
View(chess_data2)
View(chess_data2)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.integer(rating2)
chess_data$Round1_Opp <- as.integer(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.integer(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.integer(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.integer(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.integer(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.integer(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.integer(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
View(chess_data2)
View(chess_data2)
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
View(chess_data)
View(chess_data)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.integer(rating2)
chess_data$Round1_Opp <- as.integer(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.integer(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.integer(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.integer(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.integer(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.integer(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.integer(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
library(sqldf)
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
View(chess_data)
View(chess_data)
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
chess_data$Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
?sqldf
chess_data$Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a, chess_data2 b where a.Round2_Opp = b.V11")
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
?merge
?sqldf
chess_data$Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a join chess_data2 b on a.Round3_Opp = b.V11")
chess_data$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
library(sqldf)
Opponents$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.integer(rating2)
chess_data$Round1_Opp <- as.integer(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.integer(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.integer(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.integer(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.integer(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.integer(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.integer(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
library(sqldf)
library(sqldf)
Opponents$Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
#chess_data$Round1_game <- ifelse(is.na(chess_data$Round1_Opp_Rating), 0, 1)
test <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
View(test)
View(test)
Round1_Opp_Rating <- ifelse(is.na(sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")), 0, sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11"))
ifelse(is.na(Round1_Opp_Rating),0, Round1_Opp_Rating)
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
#chess_data$Round1_game <- ifelse(is.na(chess_data$Round1_Opp_Rating), 0, 1)
test <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
View(test)
View(test)
View(Round3_Opp_Rating)
View(Round3_Opp_Rating)
?rowSums
replace(is.na(Round1_Opp_Rating), 0)
?replace
Round1_Opp_Rating[is.na(Round1_Opp)]<-0
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
View(Round1_Opp_Rating)
View(Round1_Opp_Rating)
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round2_Opp_Rating[is.na(Round2_Opp_Rating)]<-0
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round3_Opp_Rating[is.na(Round3_Opp_Rating)]<-0
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round4_Opp_Rating[is.na(Round4_Opp_Rating)]<-0
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round5_Opp_Rating[is.na(Round5_Opp_Rating)]<-0
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round6_Opp_Rating[is.na(Round6_Opp_Rating)]<-0
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
Round7_Opp_Rating[is.na(Round7_Opp_Rating)]<-0
test <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
View(test)
View(test)
?if
..
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
View(game1)
View(game1)
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
View(chess_data)
View(chess_data)
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round2_Opp_Rating[is.na(Round2_Opp_Rating)]<-0
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round3_Opp_Rating[is.na(Round3_Opp_Rating)]<-0
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round4_Opp_Rating[is.na(Round4_Opp_Rating)]<-0
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round5_Opp_Rating[is.na(Round5_Opp_Rating)]<-0
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round6_Opp_Rating[is.na(Round6_Opp_Rating)]<-0
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
Round7_Opp_Rating[is.na(Round7_Opp_Rating)]<-0
chess_data$Opp_score <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
chess_data$Avg_Pre_Chess_Rat_Opp <- chess_data$Opp_score/chess_data$total_games
View(chess_data)
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
chess_data$Avg_Pre_Chess_Rat_Opp <- round(chess_data$Opp_score/chess_data$total_games, digits=0)
View(chess_data)
final_data <- [c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
View(final_data)
View(final_data)
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) < c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
View(final_data)
setwd("~/GitHub/MSDS/DATA607/Week 4")
write.csv(final_data, file="Project_1_data.csv")
View(final_data)
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
View(final_data)
