?plot
source("more/present.R")
present
dim(present)
names(present)
plot(present$year, present$boys/present$girls)
plot(present$year, present$boys/present$girls)
max(present$boys+present$girls)
which.max(present$boys+present$girls)
which.max(present$boys+present$girls)
present(22)
which.max(present$boys+present$girls)
present[22]
which.max(present$boys+present$girls)
present$year[22]
which.max(present$boys+present$girls)
present$year[22]
present$year(which.max(present$boys+present$girls))
which.max(present$boys+present$girls)
present$year[22]
present$year[which.max(present$boys+present$girls)]
max(present$boys+present$girls)
which.max(present$boys+present$girls)
present$year[22]
present$year[which.max(present$boys+present$girls)]
data(iris)
getLabs()
library(DATA606)
data("iris")
data(iris)
View(present)
c(57,66)
exams <- c(57,66)
exams
boxplot(exams)
exams <- c(57,66,69,71,72,73,74,77,78,78,79,79,81,81,82,83,83,88,89,94)
summary((exams))
boxplot(exams)
45/69
30/34
69-45
45+30
69+34
75+24
30+45
75+8
75+28
library(DATA606)
View(iris)
data(heartTr)
data(iris)
View(present)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
data(iris)
View(present)
View(present)
data("iris")
View(present)
library(XML)
install.packages("XML")
library(XML)
mushrooms <- readHTMLTable("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data")
test <- htmlParse("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data")
test <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"))
install.packages("RSQLite")
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.integer(rating2)
chess_data$Round1_Opp <- as.integer(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.integer(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.integer(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.integer(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.integer(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.integer(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.integer(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round2_Opp_Rating[is.na(Round2_Opp_Rating)]<-0
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round3_Opp_Rating[is.na(Round3_Opp_Rating)]<-0
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round4_Opp_Rating[is.na(Round4_Opp_Rating)]<-0
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round5_Opp_Rating[is.na(Round5_Opp_Rating)]<-0
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round6_Opp_Rating[is.na(Round6_Opp_Rating)]<-0
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
Round7_Opp_Rating[is.na(Round7_Opp_Rating)]<-0
chess_data$Opp_score <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
chess_data$Avg_Pre_Chess_Rat_Opp <- round(chess_data$Opp_score/chess_data$total_games, digits=0)
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
View(final_data)
View(final_data)
?sapply
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp.Player_Pre_Rating")
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp..Player_Pre_Rating")]
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp.Player_Pre_Rating")]
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
chess_data$Avg_Pre_Chess_Rat_Opp <- unlist(round(chess_data$Opp_score/chess_data$total_games, digits=0))
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
trimws(final_data$Player_Name, which = "right")
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data$Player_Name <- trimws(final_data$Player_Name, which = "both")
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(RCurl)
url <- "https://raw.githubusercontent.com/mmondy/MSDS/master/DATA607/Week%204/tournamentinfo.txt"
data1 <- getURL(url)
data <- read.csv(textConnection(data1), skip=4, header=FALSE, sep="|")
View(data)
rows_in_data= 1:192
every_3_row = (rows_in_data %% 3)==0
new_data <- data[!every_3_row,]
odd_rows <- new_data[c(TRUE,FALSE),]
even_rows <- new_data[c(FALSE,TRUE),]
even_rows$V11 = c(1:64)
odd_rows$V11 = c(1:64)
combined_data <- merge(even_rows, odd_rows, by="V11")
chess_data <- combined_data[c("V11","V2.y", "V1.x", "V3.y", "V2.x", "V4.y", "V5.y", "V6.y", "V7.y", "V8.y", "V9.y", "V10.y")]
View(chess_data)
library(stringr)
rating1 <- sapply(str_split(chess_data$V2.x, "R: "), "[", 2)
rating2 <- str_extract(rating1, "[[:digit:]]{3,4}")
chess_data$Player_Pre_Rating <- as.integer(rating2)
chess_data$Round1_Opp <- as.integer(str_extract(chess_data$V4.y, "[[:digit:]]{1,2}"))
chess_data$Round2_Opp <- as.integer(str_extract(chess_data$V5.y, "[[:digit:]]{1,2}"))
chess_data$Round3_Opp <- as.integer(str_extract(chess_data$V6.y, "[[:digit:]]{1,2}"))
chess_data$Round4_Opp <- as.integer(str_extract(chess_data$V7.y, "[[:digit:]]{1,2}"))
chess_data$Round5_Opp <- as.integer(str_extract(chess_data$V8.y, "[[:digit:]]{1,2}"))
chess_data$Round6_Opp <- as.integer(str_extract(chess_data$V9.y, "[[:digit:]]{1,2}"))
chess_data$Round7_Opp <- as.integer(str_extract(chess_data$V10.y, "[[:digit:]]{1,2}"))
chess_data2 <- chess_data[c("V11","Player_Pre_Rating")]
library(sqldf)
Round1_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round1_Opp = b.V11")
Round1_Opp_Rating[is.na(Round1_Opp_Rating)]<-0
Round2_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round2_Opp = b.V11")
Round2_Opp_Rating[is.na(Round2_Opp_Rating)]<-0
Round3_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round3_Opp = b.V11")
Round3_Opp_Rating[is.na(Round3_Opp_Rating)]<-0
Round4_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round4_Opp = b.V11")
Round4_Opp_Rating[is.na(Round4_Opp_Rating)]<-0
Round5_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round5_Opp = b.V11")
Round5_Opp_Rating[is.na(Round5_Opp_Rating)]<-0
Round6_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round6_Opp = b.V11")
Round6_Opp_Rating[is.na(Round6_Opp_Rating)]<-0
Round7_Opp_Rating <- sqldf("select b.Player_Pre_Rating from chess_data a left join chess_data2 b on a.Round7_Opp = b.V11")
Round7_Opp_Rating[is.na(Round7_Opp_Rating)]<-0
chess_data$Opp_score <- Round1_Opp_Rating + Round2_Opp_Rating + Round3_Opp_Rating + Round4_Opp_Rating + Round5_Opp_Rating + Round6_Opp_Rating + Round7_Opp_Rating
game1 <- ifelse(Round1_Opp_Rating == 0, 0, 1)
game2 <- ifelse(Round2_Opp_Rating == 0, 0, 1)
game3 <- ifelse(Round3_Opp_Rating == 0, 0, 1)
game4 <- ifelse(Round4_Opp_Rating == 0, 0, 1)
game5 <- ifelse(Round5_Opp_Rating == 0, 0, 1)
game6 <- ifelse(Round6_Opp_Rating == 0, 0, 1)
game7 <- ifelse(Round7_Opp_Rating == 0, 0, 1)
chess_data$total_games <- game1+game2+game3+game4+game5+game6+game7
chess_data$Avg_Pre_Chess_Rat_Opp <- unlist(round(chess_data$Opp_score/chess_data$total_games, digits=0))
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data$Player_Name <- trimws(final_data$Player_Name, which = "both")
final_data$Player_State <- trimws(final_data$Player_State, which="both")
final_data$Tot_Num_Points <- as.numeric(final_data$Tot_Num_Points)
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data$Player_Name <- trimws(final_data$Player_Name, which = "both")
final_data$Player_State <- trimws(final_data$Player_State, which="both")
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data$Player_Name <- trimws(final_data$Player_Name, which = "both")
final_data$Player_State <- trimws(final_data$Player_State, which="both")
final_data$Tot_Num_Points <- as.numeric(final_data$Tot_Num_Points)
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
final_data <- chess_data[c("V2.y", "V1.x", "V3.y", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")]
names(final_data) <- c("Player_Name", "Player_State", "Tot_Num_Points", "Player_Pre_Rating", "Avg_Pre_Chess_Rat_Opp")
final_data$Player_Name <- trimws(final_data$Player_Name, which = "both")
final_data$Player_State <- trimws(final_data$Player_State, which="both")
final_data$Tot_Num_Points <- as.numeric(trimws(final_data$Tot_Num_Points,which="both"))
write.csv(final_data, file="Project_1_data.csv", row.names=FALSE)
---
title: "Week 5 Assignment"
author: "Michelle Mondy"
date: "September 30, 2017"
output:
html_document:
toc: true
toc_float: true
code_folding: show
library(DATA606)
setwd("~/GitHub/MSDS/DATA606/Labs")
getLabs()
startLab("Lab4a")
load("more/ames.RData")
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
samp1 <- sample(area, 50)
summary(samp1)
hist(samp1)
mean(samp1)
samp2 <- sample(area, 50)
mean(samp2)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
hist(sample_means50, breaks = 25)
summary(sample_means50)
summary(sample_means50)
sample_means60 <- rep(NA, 50000)
for(i in 1:50000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means60)
summary(sample_means50)
sample_means60 <- rep(NA, 50000)
for(i in 1:50000){
samp <- sample(area, 50)
sample_means60[i] <- mean(samp)
}
hist(sample_means60)
summary(sample_means50)
sample_means50 <- rep(NA, 5000)
samp <- sample(area, 50)
sample_means50[1] <- mean(samp)
samp <- sample(area, 50)
sample_means50[2] <- mean(samp)
samp <- sample(area, 50)
sample_means50[3] <- mean(samp)
samp <- sample(area, 50)
sample_means50[4] <- mean(samp)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
print(i)
}
?rep
sample_means_small <- rep(NA, 100)
for (i in 1:100) {
samp <- sample(area, 50)
sample_means_small[i] <- nean(samp)
}
sample_means_small <- rep(NA, 100)
for (i in 1:100) {
samp <- sample(area, 50)
sample_means_small[i] <- mean(samp)
}
sample_means_small
hist(sample_means50)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits <- range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
psamp <- sample(price, 50)
mean(psamp)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
summary(sample_means50)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
pop_mean <- mean(price)
pop_mean
sample_means150 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
}
sample_means150 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
}
hist(sample_means150)
sample_means150 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
}
hist(sample_means150, breaks = 20)
sample_means150 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 150)
sample_means150[i] <- mean(samp)
}
par(mfrow = c(2, 1))
xlimits <- range(sample_means50)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means150, breaks = 20, xlim = xlimits)
sample_means50 <- rep(NA, 5000)
for(i in 1:5000){
samp <- sample(price, 50)
sample_means50[i] <- mean(samp)
}
plot(sample_means50)
hist(sample_means50)
pop_mean <- mean(price)
pop_mean
startLab("Lab4b")
load("more/ames.RData")
load("more/ames.RData")
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
hist(samp)
summary(samp)
hist(samp, breaks= 20)
summary(samp)
hist(samp, breaks= 20)
sample_mean <- mean(samp)
se <- sd(samp) / sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp)    # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp)        # save sample sd in ith element of samp_sd
}
lower_vector <- samp_mean - 1.96 * samp_sd / sqrt(n)
upper_vector <- samp_mean + 1.96 * samp_sd / sqrt(n)
c(lower_vector[1], upper_vector[1])
plot_ci(lower_vector, upper_vector, mean(population))
45/50
qnorm(.95, 0, 1)
qnorm(.95, 0, 1)
lower_vector2 <- samp_mean - 1.65 * samp_sd / sqrt(n)
upper_vector2 <- samp_mean + 1.65 * samp_sd / sqrt(n)
c(lower_vector2[1], upper_vector2[1])
qnorm(.95, 0, 1)
lower_vector2 <- samp_mean - 1.65 * samp_sd / sqrt(n)
upper_vector2 <- samp_mean + 1.65 * samp_sd / sqrt(n)
c(lower_vector2[1], upper_vector2[1])
plot_ci(lower_vector, upper_vector, mean(population))
qnorm(.95, 0, 1)
lower_vector2 <- samp_mean - 1.65 * samp_sd / sqrt(n)
upper_vector2 <- samp_mean + 1.65 * samp_sd / sqrt(n)
c(lower_vector2[1], upper_vector2[1])
plot_ci(lower_vector2, upper_vector2, mean(population))
44/50
